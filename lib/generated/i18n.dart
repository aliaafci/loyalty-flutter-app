import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get btn_change_password => "Change Password";
  String get btn_link_subscription => "Link Subscription";
  String get btn_register => "Register";
  String get btn_subscribe => "Subscribe";
  String get confirm_email_lbl => "Confirm Email Address";
  String get email_lbl => "Email Address";
  String get empty_history_list_lbl => "There is no history";
  String get empty_list_lbl => "You don't have any subscriptions";
  String get exist_user_lbl => "Existing user?";
  String get expiry_date_lbl => "Expire date: ";
  String get home_lbl => "Home";
  String get label_added_successfully => "ِAdded successfuly";
  String get label_change_lang => "Change Language";
  String get label_done => "Done";
  String get label_error => "Error";
  String get label_error_empty_field => "Please fill in all fields";
  String get label_ok => "Ok";
  String get label_registered_successfully => "Registered successfuly";
  String get label_sign_out => "Sign out";
  String get label_subscription_date => "Date of subscription:";
  String get login_btn => "Login to my Account";
  String get login_now_lbl => "Login now";
  String get mobile_lbl => "Mobile Number";
  String get my_account_lbl => "My Account";
  String get my_subscription_header => "Subscriptions List";
  String get my_subscription_lbl => "My Subscriptions";
  String get name_lbl => "Full Name";
  String get new_user_lbl => "New User?";
  String get number_of_points_lbl => "Number of points: ";
  String get or_lbl => "Or";
  String get password_lbl => "Password";
  String get product_lbl => "Subscription details";
  String get setting_lbl => "Settings";
  String get sign_up_email_lbl => "Signup with Email";
  String get sign_up_facebook_btn => "Continue with Facebook";
  String get sign_up_google_btn => "Continue with Google";
  String get sign_up_now_lbl => "Signup now";
  String get subscription_confirmation_lbl => "Confirmation";
  String get subscription_history_btn => "Subscription History";
  String get subscription_history_header => "Subscriptions History";
  String get subscription_message_lbl => "In order to subscribe to this package you need to enter your subscription number and your mobile number.";
  String get subscription_mobile_no_hint => "Enter your mobile no.";
  String get subscription_subcsription_no_hint => "Enter your subscription no.";
  String get subscription_subscribe_btn => "Subscribe";
  String get txt_confirm_password => "Confirm Password";
  String get txt_new_password => "New Password";
  String get txt_old_password => "Old Password";
}

class $ar extends S {
  const $ar();

  @override
  TextDirection get textDirection => TextDirection.rtl;

  @override
  String get password_lbl => "كلمه المرور";
  @override
  String get mobile_lbl => "الجوال";
  @override
  String get label_added_successfully => "تم الاضافه بنجاح";
  @override
  String get empty_history_list_lbl => "ﻻ يوجد تاريخ";
  @override
  String get or_lbl => "أو";
  @override
  String get label_done => "تم";
  @override
  String get subscription_message_lbl => "للاشتراك، عليك ادخال رقم الاشتراك ورقم الجوال.";
  @override
  String get login_btn => "دخول إلى حسابي";
  @override
  String get login_now_lbl => "تسجيل الدخول الآن";
  @override
  String get sign_up_google_btn => "تسجيل بواسطةجوجل";
  @override
  String get sign_up_email_lbl => "تسجيل عن طريق البريد الإلكتروني";
  @override
  String get number_of_points_lbl => "عدد النقاط: ";
  @override
  String get subscription_subcsription_no_hint => "ادخل رقم الاشتراك";
  @override
  String get subscription_mobile_no_hint => "ادخل رقم الجوال";
  @override
  String get txt_old_password => "كلمة المرور القديمة";
  @override
  String get label_sign_out => "تسجيل الخروج";
  @override
  String get subscription_history_btn => "البيانات التاريخيه للاشتراك";
  @override
  String get label_change_lang => "تغيير اللغة";
  @override
  String get subscription_history_header => "تاريخ الاشتراكات";
  @override
  String get btn_register => "تسجيل";
  @override
  String get my_subscription_lbl => "اشتراكاتي";
  @override
  String get home_lbl => "الرئيسية";
  @override
  String get exist_user_lbl => "مستخدم حالي؟";
  @override
  String get label_error_empty_field => "برجاء ان تملأ جميع الحقول";
  @override
  String get label_registered_successfully => "تم التسجيل بنجاح";
  @override
  String get txt_confirm_password => "تاكيد كلمة المرور";
  @override
  String get label_subscription_date => "التاريخ";
  @override
  String get label_error => "خطأ";
  @override
  String get sign_up_facebook_btn => "تسجيل بواسطةفيس بوك";
  @override
  String get my_subscription_header => "قائمة الاشتراك";
  @override
  String get subscription_confirmation_lbl => "تأكيد الاشتراك";
  @override
  String get btn_change_password => "تغيير كلمة المرور";
  @override
  String get confirm_email_lbl => "تأكيد البريد الالكترونى";
  @override
  String get subscription_subscribe_btn => "اشترك";
  @override
  String get email_lbl => "البريد الالكترونى";
  @override
  String get btn_link_subscription => "ربط الاشتراك";
  @override
  String get name_lbl => "اسم المستخدم";
  @override
  String get new_user_lbl => "مستخدم جديد؟";
  @override
  String get product_lbl => "تفاصيل الاشتراك";
  @override
  String get btn_subscribe => "الاشتراك";
  @override
  String get txt_new_password => "كلمة المرور الجديده";
  @override
  String get setting_lbl => "الإعدادات";
  @override
  String get expiry_date_lbl => "تاريخ الانتهاء: ";
  @override
  String get sign_up_now_lbl => "سجل الأن";
  @override
  String get empty_list_lbl => "ليس لديك اى اشتراكات";
  @override
  String get my_account_lbl => "حسابي";
  @override
  String get label_ok => "حسنا";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("ar", ""),
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "ar":
          return SynchronousFuture<S>(const $ar());
        case "en":
          return SynchronousFuture<S>(const $en());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
